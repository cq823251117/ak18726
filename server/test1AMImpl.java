package train.oracle.apps.ak.ak18726.server;

import com.sun.java.util.collections.HashMap;

import oracle.apps.ak.practice.server.practiceVOImpl;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;


import com.sun.java.util.collections.ArrayList;

import java.sql.SQLException;



import oracle.apps.fnd.framework.OAViewObject;


import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class test1AMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    private HashMap parameters; 
    private int recordNum;
    public static int countColumn=0;
    
    public void setCountColumn(int count){
        this.countColumn=count;
    }
    
    public int getCountColumn(){
        return this.countColumn;
    }
    
    public test1AMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("train.oracle.apps.ak.ak18726.server", /* package name */
      "test1AMLocal" /* Configuration Name */);
    }
    
    public void initsearch(){
          test1VOImpl oafLXVO1=(test1VOImpl)this.gettest1VO1();
          oafLXVO1.executeQuery();
      }

    /**Container's getter for test1VO1
     */
    public test1VOImpl gettest1VO1() {
        return (test1VOImpl)findViewObject("test1VO1");
    }
    public void search(HashMap parameters){
        System.out.println("am search");
        String status1=(String)parameters.get("status1");
        String suppliercodeQ=(String)parameters.get("suppliercodeQ");
        String SupplierNameQ=(String)parameters.get("SupplierNameQ");
        String groupType=(String)parameters.get("groupType");
        String Substitute=(String)parameters.get("Substitute");
        String procurementPersonCode=(String)parameters.get("procurementPersonCode");
        String whereClause=" 1=1 ";
        if(status1 != null && !"".equals(status1)){
            System.out.println("condition go");
            whereClause+=" AND status like  '"+status1+ "' ";
        }
        if(suppliercodeQ != null && !"".equals(suppliercodeQ)){
            System.out.println("condition go");
            whereClause+=" AND supplier_code like  '"+suppliercodeQ+ "' ";
        }
        if(SupplierNameQ != null && !"".equals(SupplierNameQ)){
            System.out.println("condition go");
            whereClause+=" AND supplier_name like  '"+SupplierNameQ+ "' ";
        }
        if(groupType != null && !"".equals(groupType)){
            System.out.println("condition go");
            whereClause+=" AND procurement_group_code like  '"+groupType+ "' ";
        }
        if(Substitute != null && !"".equals(Substitute)){
            System.out.println("condition go");
            whereClause+=" AND gm_approver_fnd_user_id  like  '"+Substitute+ "' ";
        }
        if(procurementPersonCode != null && !"".equals(procurementPersonCode)){
            System.out.println("condition go");
            whereClause+=" AND procurement_person_code like  '"+procurementPersonCode+ "' ";
        }
        test1VOImpl testVO=(test1VOImpl)this.gettest1VO1();
        testVO.executeQueryPara(whereClause);
    }

    /**Container's getter for testBodyVO1
     */
    public testBodyVOImpl gettestBodyVO1() {
        return (testBodyVOImpl)findViewObject("testBodyVO1");
    }

    /**Container's getter for testHeadVO1
     */
    public testHeadVOImpl gettestHeadVO1() {
        return (testHeadVOImpl)findViewObject("testHeadVO1");
    }
    
    public void selectAll(){
        OAViewObject vo = gettest1VO1();
        test1VORowImpl row = null;
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator checkIter = vo.createRowSetIterator("checkIter");
        checkIter.setRangeStart(0);
        checkIter.setRangeSize(fetchedRowCount);
        for (int i = 0; i < fetchedRowCount; i++) {
            row = (test1VORowImpl)checkIter.getRowAtRangeIndex(i);
            row.setSelection("Y");
        }
    }
    
    public void selectNone(){
        OAViewObject vo = gettest1VO1();
        test1VORowImpl row = null;
        int fetchedRowCount = vo.getFetchedRowCount();
        RowSetIterator checkIter = vo.createRowSetIterator("checkIter");
        checkIter.setRangeStart(0);
        checkIter.setRangeSize(fetchedRowCount);
        for (int i = 0; i < fetchedRowCount; i++) {
            row = (test1VORowImpl)checkIter.getRowAtRangeIndex(i);
            row.setSelection("N");
        }
    }
    
    public HashMap callPricemaintenance() {
        
           
            Number BeginningCarryingoverId=null;
            Number countNum=null;
            Number sumAmount=null;
            HashMap parameters = new HashMap();
            ArrayList beginningCarryingoverIdAL = new ArrayList();
            ArrayList countNumAL = new ArrayList();
            ArrayList sumAmountAL = new ArrayList();
            OAViewObject vo = gettest1VO1();
            test1VORowImpl row = null;
            int fetchedRowCount = vo.getFetchedRowCount();
            RowSetIterator checkIter = vo.createRowSetIterator("checkIter");
            checkIter.setRangeStart(0);
            checkIter.setRangeSize(fetchedRowCount);
            for (int i = 0; i < fetchedRowCount; i++) {
                row = (test1VORowImpl)checkIter.getRowAtRangeIndex(i);
                if ("Y".equals(row.getSelection())) {
                    System.out.println(i+" first "+row.getSelection()+" second "+row.getVoSubcontractActCls());
                    BeginningCarryingoverId = row.getBeginningCarryingoverId();
                    beginningCarryingoverIdAL.add(BeginningCarryingoverId);
                    countNum = row.getCountNum();
                    countNumAL.add(countNum);
                    sumAmount = row.getMonthsPurchasePrice6();
                    sumAmountAL.add(sumAmount);
                    countColumn++;
                }
                parameters.put("beginningCarryingoverId", beginningCarryingoverIdAL);
                parameters.put("countNum", countNumAL);
                parameters.put("sumAmount", sumAmountAL);
            }
            System.out.println("countColumn1="+getCountColumn());
            return parameters;
        }
    public void setParameters(HashMap parameters) {
            this.parameters = parameters;
        }
    public HashMap getParameters() {
            return parameters;
        }
    public void setRecordNum(int recordNum) {
            this.recordNum = recordNum;
        }
    public int getRecordNum() {
            return recordNum;
        }
    public Boolean isFirstRow() {
            if (parameters == null) {
                return Boolean.TRUE;
            }
            return Boolean.valueOf(recordNum == 0);
        }
    public Boolean isLastRow() {
            if (parameters == null) {
                return Boolean.TRUE;
            }
            return Boolean.valueOf(((ArrayList)parameters.get("sumAmount")).size() - 1 == recordNum);
        }
    public void initQuery(Number SumAmount, Number BeginningCarryingoverId, Number VoCountNum) throws SQLException {
           
         
            OAViewObject vo = this.gettestHeadVO1();
            vo.setWhereClause(null);
            vo.clearCache();
            vo.setWhereClauseParams(null);
            StringBuffer whereClause = new StringBuffer(400);
            whereClause.append(" 1=1");
            vo.setWhereClauseParam(0, VoCountNum);
            vo.setWhereClauseParam(1, SumAmount);
            vo.setWhereClauseParam(2, BeginningCarryingoverId);
            vo.setWhereClause(whereClause.toString());
            System.out.println("where="+whereClause.toString());
            System.out.println("head Information="+vo.getQuery());
            vo.executeQuery();
            vo.setCurrentRowAtRangeIndex(0);
            testHeadVORowImpl row = 
                (testHeadVORowImpl)vo.getCurrentRow();
            String ProcurementGroupCode = row.getProcurementGroupCode();
            String ProcurementPersonCode = row.getProcurementPersonCode(); 
            Number SupplierId = row.getSupplierId(); 
            Number MakerId = row.getMakerId(); 
            String CurrencyCode = row.getCurrencyCode();
            OAViewObject vol = this.gettestBodyVO1();
            vol.setWhereClause(null);
            vol.clearCache();
            vol.setWhereClauseParams(null);
            StringBuffer whereClausel = new StringBuffer(400);
            whereClausel.append(" 1=1");
            whereClausel.append(" AND procurement_group_code = '" + ProcurementGroupCode + "'");
            whereClausel.append(" AND procurement_person_code = '" + ProcurementPersonCode + "'");
            whereClausel.append(" AND supplier_id = " + SupplierId);
            if (MakerId != null) {
                whereClausel.append(" AND maker_id = " + MakerId);
            } else {
                whereClausel.append(" AND maker_id is null ");
            }
            whereClausel.append(" AND currency_code = '" + CurrencyCode + "'");
            vol.setWhereClause(whereClausel.toString());
            System.out.println("detail Information="+vol.getQuery());
            vol.executeQuery();
            vo.setCurrentRowAtRangeIndex(0);
           
        }
       
    
}
